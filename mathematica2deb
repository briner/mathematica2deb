#!/bin/bash
#
# P R E P A R A T I O N   B E F O R E
# T H E   M A T L A B   I N S T A L L A T I O N
#
if [[ $(uname -m) != 'x86_64' ]] ; then
    echo "this script only works for amd64 distribution"
    exit 1
fi

###########################################################
# DEFINITION
#

#
# software related
SOFT="mathematica"
SOFT_VER=9.0.1
SHORT_SOFT_VER=90

#
# package related
DEB_VER=0
SHORT_ORG=UniGE ; # a short name of your organisation
# where the soft will be installed : PKG_ROOT_DIR
PKG_ROOT_DIR="/opt/${SHORT_ORG,,}/${SOFT}${SHORT_SOFT_VER}"
#
MAIN_DIR=~/packaging/mathematica/90
EMAIL_MAINTAINER='Cedric BRINER <Cedric.Briner@UniGE.ch>'
# where the iso of matlab is mounted
export MATLAB_ISO_MOUNT_DIR='/media/briner/matlab_2014a'

#
# constructed variable
# where the build will be constructed
DEBNAME=${SHORT_ORG,,}-${SOFT}${SHORT_SOFT_VER}
BUILD_DEB=${MAIN_DIR}/${DEBNAME}_${SOFT_VER}-${DEB_VER}


###########################################################
# FONCTIONS
#

install_it()
{   
    cd ${MAIN_DIR}
    if ! touch ${PKG_ROOT_DIR}/is_writable
    then
        echo "arrgh, dir(${PKG_ROOT_DIR}) is not writable by ${USERNAME}"
        echo "  please creute the dir (${PKG_ROOT_DIR}) and gives right for user(${USERNAME})"
        echo " - sudo -s (ubuntu) or su - (debian)"
        echo " - mkdir -p ${PKG_ROOT_DIR}"
        echo " - chown ${USERNAME}: ${PKG_ROOT_DIR}"    
        echo " - exit"
        exit 1
    fi
    rm -f ${PKG_ROOT_DIR}/is_writable
    #
    #
    echo "install it under ${PKG_ROOT_DIR}"
    echo "specify  ${PKG_ROOT_DIR}/bin for the path in which the Wolfram Mathematica script(s) will be created"
}

###########################################################
# FONCTIONS
#

rsync_it()
{
    test -d  ${MAIN_DIR}/rsync || mkdir -p ${MAIN_DIR}/rsync
    echo -n "this can take timeâ€¦ "
    rsync -q -avHl --force --delete ${PKG_ROOT_DIR}/ ${MAIN_DIR}/rsync/
    echo "done"
}

make_deb()
{
    cd ${MAIN_DIR}
    #
    #
    # rapatriate the fresh install to the BUILD_DEB SPACE
    rm -fr ${BUILD_DEB}
    mkdir -p ${BUILD_DEB}/{${PKG_ROOT_DIR},usr/bin,DEBIAN}
    mkdir -p ${BUILD_DEB}/{usr/share/pixmaps,usr/share/applications}
    rsync -avq --force --delete \
          --link-dest=${MAIN_DIR}/rsync \
          ${MAIN_DIR}/rsync/ ${BUILD_DEB}/${PKG_ROOT_DIR}/
    #
    #
    # creation of the symlink in /usr/bin
    rsync -avHlq --force --delete  ${MAIN_DIR}/rsync/bin/  ${BUILD_DEB}/${PKG_ROOT_DIR}/bin/
    cd ${BUILD_DEB}/usr/bin
    for filebin in ../../${PKG_ROOT_DIR}/bin/* ; do
        echo $filebin
        linkname=$(basename ${filebin})${SHORT_SOFT_VER}
        mv ${filebin} ${linkname}
    done
    cd - > /dev/null
    #
    #
    # creation of the DEBIAN/control
    cat  > ${BUILD_DEB}/DEBIAN/control << EOF
Package: ${DEBNAME}
Version: ${SOFT_VER}-${DEB_VER}
Architecture: amd64
Maintainer: ${EMAIL_MAINTAINER}
Section: main
Priority: extra
Depends: xmaxima
Description: ${SOFT}${SHORT_SOFT_VER} @ ${SHORT_ORG}
EOF
    #
    #
    # creation of the DEBIAN/postrm (post-remove)
    cat > ${BUILD_DEB}/DEBIAN/postrm << EOF
#!/bin/bash
rm -fr ${PKG_ROOT_DIR}
EOF
    chmod 755  ${BUILD_DEB}/DEBIAN/postrm
    #
    #
    # DESKTOP icon
    convert ${MAIN_DIR}/../mathematica2deb.d/mathematica.png -resize 128x128 -pointsize 48 -gravity northeast -annotate 0 "${SHORT_SOFT_VER}" ${BUILD_DEB}/usr/share/pixmaps/${DEBNAME}.png
    cat > ${BUILD_DEB}/usr/share/applications/${DEBNAME}.desktop << EOF
[Desktop Entry]
Version=1.0
Name=${SOFT} ${SOFT_VER}
Comment=Why not trying freesoftware as xmaxima
Exec=${SOFT}${SHORT_SOFT_VER}
Icon=${DEBNAME}.png
Terminal=false
Type=Application
Categories=Development;
EOF
    
    #
    #
    # construct the package
    fakeroot dpkg -b ${BUILD_DEB}
    #
    #
    # check rm -fr
    echo "check rm -fr in postrm"
    echo "-----------------------"
    grep 'rm -fr' ${BUILD_DEB}/DEBIAN/control

    echo 'before installing, remove the installation made if the matlab installer' 
    echo '-----------------------------------------------------------------------'
    echo "with: sudo rm -fr ${PKG_ROOT_DIR}"
}

###########################################################
# last output
#
last_output()
{
echo "do fo eg: sudo dpkg  -i ${MAIN_DIR}/*deb"
}

###########################################################
# main
#

usage () {
	scriptname=$(basename ${0})
   cat <<EOF
Usage: $scriptname
       usually we do:
         - configure in the code the define_var part
         - prepare for the installation of mathematica
             $scriptname -i
         - install the software itself
             /media/briner/mathematica_9.0/Unix/Installer/MathInstaller
         - rsync the installation on packaging/soft/version/rsync
             $scriptname -r
         - make a deb package of the software
            $scriptname -m
   -h   displays basic help
   -v   verbose
   -l   stdout and stderr to \$LOG_PATH(${LOG_PATH})
   -p   prepare the OS to install ${SOFT}
   -r   rsync <where should be the definitive soft> to <dir in the packaging space>
   -m   make a deb of the software
EOF
   exit 0
}

IS_AN_OPTION="False"
IS_INSTALL="False"
IS_RSYNC="False"
IS_MAKE_DEB="False"
while getopts ":hvlirdm" opt; do
  IS_AN_OPTION="True"
  case $opt in
    h)
      usage
      ;;
    v)
      IS_WRAP_SSL="True"
      IS_WRAP_SOMETHING="True"
      ;;
    l)
      echo "not yet implemented"
      usage
      ;;
    i)
      IS_INSTALL="True"
      ;;
    r)
      IS_RSYNC="True"
      ;;
    m)
      IS_MAKE_DEB="True"
      ;;
    *)
      echo "unknown option"
      usage
  esac
done


shift $((OPTIND-1))

if test "${IS_AN_OPTION}" = "False"
then
    usage
fi

if test "${IS_INSTALL}" = "True"
then
    echo "installation of mathematica"
    echo "--------------------"
    install_it | sed -u "s|^|  |"
fi


if test "${IS_RSYNC}" = "True"
then
    echo
    echo "syncing it"
    echo "----------"
    cd ${MAIN_DIR}
    rsync_it | sed -u "s|^|     |"
fi

if test "${IS_MAKE_DEB}" = "True"
then
    echo
    echo " - make a deb"
    echo "   ----------"
    cd ${MAIN_DIR}
    make_deb | sed -u "s|^|     |"

    echo
    echo "check the new package created"
    echo "-----------------------------"
    last_output | sed -u "s|^|  |"
fi



